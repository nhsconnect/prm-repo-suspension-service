plugins {
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'com.github.spotbugs' version '5.2.4'
    id 'org.owasp.dependencycheck' version '7.4.4'
    id 'org.sonarqube' version '4.4.1.3373'
}

group = 'uk.nhs.prm.repo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

//Without this task two jars are built, the additional "-plain.jar" is not needed
// for more details refer to: https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#packaging-executable.and-plain-archives
jar {
    enabled = false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-json'

    implementation 'org.yaml:snakeyaml:2.2'

    implementation('io.netty:netty-buffer') { version { strictly '4.1.86.Final' } }
    implementation('io.netty:netty-codec') { version { strictly '4.1.86.Final' } }
    implementation('io.netty:netty-codec-http') { version { strictly '4.1.86.Final' } }
    implementation('io.netty:netty-codec-http2') { version { strictly '4.1.86.Final' } }
    implementation('io.netty:netty-common') { version { strictly '4.1.86.Final' } }
    implementation('io.netty:netty-handler') { version { strictly '4.1.86.Final' } }
    implementation('io.netty:netty-resolver') { version { strictly '4.1.86.Final' } }
    implementation('io.netty:netty-transport') { version { strictly '4.1.86.Final' } }
    implementation('io.netty:netty-transport-classes-epoll') { version { strictly '4.1.86.Final' } }
    implementation('io.netty:netty-transport-native-epoll') { version { strictly '4.1.86.Final' } }
    implementation('io.netty:netty-transport-native-unix-common') { version { strictly '4.1.86.Final' } }

    implementation platform('software.amazon.awssdk:bom:2.21.46')
    implementation 'software.amazon.awssdk:cloudwatch'
    implementation 'software.amazon.awssdk:sns'
    implementation 'software.amazon.awssdk:sqs'
    implementation 'software.amazon.awssdk:dynamodb'

    // TODO: Once we upgrade amazon-sqs-java-messaging-lib to v2 we can remove aws-java-sdk-core and sqs.
    implementation 'com.amazonaws:amazon-sqs-java-messaging-lib:1.1.2'
    implementation 'com.amazonaws:aws-java-sdk-core:1.12.619'
    implementation 'com.amazonaws:aws-java-sdk-sqs:1.12.619'

    implementation 'com.google.code.gson:gson:2.10.1'

    // TODO: Best upgrade once fix is released.
    implementation 'com.google.guava:guava:32.0.0-jre'

    implementation 'io.github.resilience4j:resilience4j-retry:1.7.1'
    implementation 'org.springframework:spring-jms:5.3.19'

    implementation 'com.github.spotbugs:spotbugs-annotations:4.8.3'
    implementation 'org.apache.bcel:bcel:6.6.1'

    // TODO: Can remove explicit definition when CVE-2023-24998 is fixed
    implementation 'commons-fileupload:commons-fileupload:1.5'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    implementation 'net.logstash.logback:logstash-logback-encoder:6.4'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation 'org.springframework.boot:spring-boot-test'
    testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-aop'
    testImplementation "org.mockito:mockito-core:3.+"
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.1'
}

test {
    useJUnitPlatform()
}

test.outputs.upToDateWhen {false}

sourceSets {
    integration {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
}

tasks.withType(Test) {
    useJUnitPlatform()
}

task integration(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    mustRunAfter tasks.test
}

integration.outputs.upToDateWhen {false}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    shouldRunAfter integration
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport

    violationRules {
        rule {
            limit {
                minimum = 0.0
                //TODO: increase to to 0.7
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/model/**')
        }))
    }
}

spotbugsMain {
    ignoreFailures = true
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    ignoreFailures = true
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsIntegration {
    ignoreFailures = true
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/integration/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

dependencyCheck {
    failBuildOnCVSS = 6
    suppressionFile = './dependency-checks-suppression.xml'
    analyzers {
          assemblyEnabled = false
    }
}

sonar {
    properties {
        property "sonar.projectKey", "prm-orphaned-record-continuity_prm-repo-suspension-service"
        property 'sonar.organization', 'prm-orphaned-record-continuity'
        property 'sonar.host.url', 'https://sonarcloud.io'
    }
}

check.dependsOn integration
